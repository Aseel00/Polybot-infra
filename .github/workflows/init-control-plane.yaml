name: ⚙️ Initialize Kubernetes Control Plane

on:
  workflow_run:
    workflows: ["🚀 Provision Kubernetes Infrastructure"]
    types:
      - completed

permissions:
  actions: read
  contents: read

jobs:
  init-control-plane:
    runs-on: ubuntu-latest
    name: Init Control Plane

    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          cat > ~/.ssh/config <<EOF
          Host ec2
            HostName ${{ secrets.EC2_CONTROL_HOST }}
            User ${{ secrets.EC2_USER }}
            IdentityFile ~/.ssh/private_key
            StrictHostKeyChecking no
          EOF

      - name: SSH and initialize Kubernetes with sparse clone
        run: |
          ssh ec2 <<'EOF'
            set -e

            # Initialize control plane if not already done
            if [ ! -f /etc/kubernetes/admin.conf ]; then
              sudo kubeadm init --pod-network-cidr=192.168.0.0/16
              mkdir -p $HOME/.kube
              sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
              sudo chown $(id -u):$(id -g) $HOME/.kube/config
              kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/calico.yaml
            fi

            # Sparse checkout only tf/k8s/dev/PolybotService from repo
            SPARSE_DIR="$HOME/polybot-sparse"
            SPARSE_PATHS=("tf/k8s/dev/PolybotService" "tf/k8s/dev/YoloService" "tf/k8s/dev/ingress-controller" "tf/k8s/dev/ArgoCD")

            if [ -d "$SPARSE_DIR/.git" ]; then
              echo "✅ Sparse repo already exists. Pulling..."
              cd "$SPARSE_DIR"
              git sparse-checkout set "${SPARSE_PATHS[@]}"
              git pull origin main
            else
              echo "⬇️ Cloning sparse directories..."
              git init "$SPARSE_DIR"
              cd "$SPARSE_DIR"
              git remote add origin https://github.com/Aseel00/Polybot-infra.git
              git sparse-checkout init --cone
              git sparse-checkout set "${SPARSE_PATHS[@]}"
              git pull origin main
            fi
            # Create the namespace only if it doesn't exist
            if ! kubectl get ns dev >/dev/null 2>&1; then
              kubectl create ns dev
            fi

            kubectl delete secret polybot-aseel-dev-secrets -n dev --ignore-not-found

            kubectl create secret generic polybot-aseel-dev-secrets \
              --from-literal=TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_DEV }} \
              --from-literal=BUCKET_NAME=${{ secrets.BUCKET_NAME_DEV }} \
              --from-literal=REGION=${{ secrets.REGION }} \
              --from-literal=SQS_URL=${{ secrets.SQS_URL_DEV }} \
              --from-literal=DDB_TABLE_NAME=${{ secrets.TABLE_NAME_DEV }} \
              --from-literal=YOLO_URL=${{ secrets.YOLO_URL_DEV }} \
              -n dev


            # Deploy polybot
            kubectl apply -f "$SPARSE_DIR/tf/k8s/dev/PolybotService/"
          
            kubectl apply -f "$SPARSE_DIR/tf/k8s/dev/ingress-controller/"
          
            kubectl delete secret yolo-dev-secrets -n dev --ignore-not-found
            
            
            kubectl create secret generic yolo-dev-secrets \
              --from-literal=BUCKET_NAME=${{ secrets.BUCKET_NAME_DEV }} \
              --from-literal=REGION=${{ secrets.REGION }} \
              --from-literal=SQS_URL=${{ secrets.SQS_URL_DEV }} \
              --from-literal=DDB_TABLE_NAME=${{ secrets.TABLE_NAME_DEV }} \
              --from-literal=STORAGE_TYPE=${{ secrets.STORAGE_TYPE }} \
              -n dev
            

            # Deploy yolo
            kubectl apply -f "$SPARSE_DIR/tf/k8s/dev/YoloService/deployment.yaml"

            if ! kubectl get ns argocd >/dev/null 2>&1; then
              kubectl create ns argocd
            fi
            kubectl apply -n argocd -f "$SPARSE_DIR/tf/k8s/dev/ArgoCD/install.yaml"
            
            
          

            kubectl apply -f "$SPARSE_DIR/tf/k8s/dev/ArgoCD/app-of-apps.yaml"


          
            # Generate join command
            JOIN_CMD="sudo $(kubeadm token create --print-join-command)"
            echo "$JOIN_CMD" > /tmp/k8s_join.sh

            # Install AWS CLI if not already present
            if ! command -v aws &>/dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi

            # Store join command in Secrets Manager
            if aws secretsmanager describe-secret --secret-id ASEEL_K8S_JOIN_COMMAND --region eu-north-1 2>/dev/null; then
              aws secretsmanager put-secret-value \
                --secret-id ASEEL_K8S_JOIN_COMMAND \
                --secret-string file:///tmp/k8s_join.sh \
                --region eu-north-1
            else
              aws secretsmanager create-secret \
                --name ASEEL_K8S_JOIN_COMMAND \
                --secret-string file:///tmp/k8s_join.sh \
                --region eu-north-1
            fi
          EOF
